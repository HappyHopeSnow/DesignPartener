public class Main {

    public static void main(String[] args) {
        System.out.println("Hello World!");
        /**
         * 共23种设计模式。
         * 行为型（11）：
         *      1.父类和子类：策略模式；模板方法
         *      2.两个类之间：观察者，职责链，命令模式，迭代器模式
         *      3.状态：备忘录模式；状态模式；
         *      4.第三方类：访问者，解释器，中介模式。
         *
         *
         * 结构型（7）：
         *      1.适配器模式；
         *      2.桥接模式；
         *      3.装饰器模式；
         *      4.外观模式；
         *      5.代理模式。
         *      6.组合模式；
         *      7.享元模式
         *
         *
         * 创建型（5）：
         *      1.工厂模式；
         *      2.抽象工厂；
         *      3.单例模式；
         *      4.建造者模式；
         *      5.原型模式；
         *
         *
         * 个人总结：
         *      1.策略模式：利用java多态，子类的不同实现方式，可以将算法封装到不同的子类中，当使用时候，由客户端进行灵活调用。
         *          优点：将算法和调用分开解耦。缺点：需要客户端知道具体调用哪一个子类。
         *      2.模板方法：利用java抽象类可以写具体实现，可以将部分通用操作，在抽象类中写出来，子类无须再进行重复编写。
         *          优点：减少重复代码，增加复用。缺点：子类中并不是所有的操作都可以复用，需要对公共操作进行抽象。
         *
         *      3.观察者模式：先新建一个观察者接口，进行多个子类实现；然后创建另外一个主题接口，建立观察者和主题之间的相互关系（主题可以对观察者增加删除通知等操作）。
         *                  对主题类进行抽象类实现，只实现对于观察者的操作，其余操作，由客户端自己去实现，方便实现类个性定制操作。
         *           优点：主题类只需增加或删除观察者，就可以进行操作，无需调用就行。
         *           缺点：
         *
         *      4.迭代器模式：提供一个迭代器接口iterator，包含对集合中元素的操作，previous,next,hasNext;在实现类中，持有集合对象，并添加集合size参数，
         *                  具体实现；集合接口，定义取元素和取迭代器方法，集合实现类中，将自己构造函数添加至迭代器中。
         *           优点：提供了一种统一处理一类元素的容器方法。
         *           缺点：大部分在算法和容器中会用到，实际中很少用到。
         *      5.职责链模式：定义一个handler接口，定义方法；定义抽象类，将handler接口作为属性进行get,set;在具体实现类中，定义getHandler==null,就进行相应操作。
         *           优点：添加了继承相同接口的依赖关系。
         *           缺点：
         *      6.命令模式：命令接口，士兵对象，调用者对象。调用者调用命令，命令持有士兵对象。达到调用者和执行者解耦。
         *              优点：
         *              缺点：
         *
         *      7.备忘录模式：源对象和备忘录拥有相同的属性值，在源目标允许建立备忘录和回复备忘录。备忘录提供对应源目标的属性值保存。
         *                  再提供一个备忘录的存储，持有备忘录。需要恢复时候，从存储中取出备忘录。
         *              优点：便于恢复。
         *              缺点：
         *      8.状态模式：定义了类和类之间的处理关系，并通过构造方法传入参数，将业务处理放到中间的状态对象中。增加内聚性。
         *              优点：在状态中间类中添加逻辑处理，在上下文中添加逻辑判断，调用端简单。
         *              缺点：
         *
         *      9.访问者模式：在接口和接口之间，互相持有对方，对应vistor()和accept()方法，用来互相访问调用。在不改变以前数据结构的前提下进行扩展不同的访问者。
         *          优点：适用于系统稳定，当前代码不允许更改，ok，扩展对应的接口即可，达到服用之前接口对象的方式。
         *          缺点：增加新的数据结构比较困难。
         *
         *      10.中介者：将对象之间的关联关系，通过中间对象进行关联依赖.在中间对象Mediator对象中进行初始化和调用，降低了对象之间的依赖耦合关系。
         *          优点：减低耦合。
         *          缺点：
         *
         *      11.解释器模式：对于一些函数的解释和封装。方便调用。
         *          优点：
         *          缺点：很少用到。
         */
    }
}
